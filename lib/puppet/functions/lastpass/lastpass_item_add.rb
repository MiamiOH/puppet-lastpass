# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require_relative 'lastpass_functions'

# Adds a LastPass generic secure note
#
# Allows puppet to add a LastPass secure note.
#
# Usage: lastpass_item_add(folder, name, content)
# Example: $db_config = lastpass_item_add('oracle/db', 'appuser', 'content goes here')
# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'lastpass::lastpass_item_add') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
  raise Puppet::ParseError, 'Usage: lastpass_item_add(folder, name, content)' unless args.size == 3

  folder = args[0]
  raise Puppet::ParseError, 'Must provide folder' if folder.empty?

  name = args[1]
  raise Puppet::ParseError, 'Must provide data name' if name.empty?

  content = args[2]
  # Content can be empty

  login

  raise Puppet::ParseError, "error: existing item '#{folder}/#{name}'" if item_exists("#{folder}/#{name}")

  create_item(folder, name, content)

  # Fetch the newly created item. This both tests the creation and yields the result
  # in the expected format.
  get_item_by_uniquename("#{folder}/#{name}")

  end
end
